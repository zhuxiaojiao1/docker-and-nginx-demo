
# 指定可以运行nginx服务的用户
# 不写 表示所有用户都可以运行
# user root

# 指定工作线程数
# number | auto --- auto 表示自动模式
worker_processes: 4;  # 会生成1个master进程和4个worker进程

# 指定pid文件存放的路径 --- pid文件:纯文本文件，里面记录的是进程的pid号
pid logs/nginx.pid;

# 错误日志路径和日志级别可以在 全局、http、server、location块 中配置
# error_log [path] [debug | info | notice | warn | error | crit | alert | emerg]
# error_log logs/error.log notice
# error_log logs/error.log info


event:{
    # 设置允许每一个worker process同时开启的最大连接数，当每个工作进程接受的连接数超过这个值时将不再接收连接
    # 当所有的工作进程都接收满时，连接进入logback，logback满后连接被拒绝
    worker_connections: 1024;
}


http:{
    # 用于包含其他的配置文件，可以放在配置文件的任何地方，但是要注意你包含进来的配置文件一定符合配置规范
    include mime.types;

    # 配置默认类型，如果不加此指令，默认值为text/plain。--- 配置：http/server/loaction
    default_type application/octet-stream;

    # 定义日志格式 --- 只能在http块中进行配置
    log_format logFormat '$remote_addr - $remote_user [$time_local] "$request" '
                 '$status $body_bytes_sent "$http_referer" '
                 '"$http_user_agent" "$http_x_forwarded_for"';

    # 记录Nginx服务器提供服务过程应答前端请求的日志 --- 配置：http/server/loaction
    # access_log off;  # 关闭
    access_log logs/access.log logFormat

    # 开启关闭sendfile方式传输文件 --- 配置：http/server/loaction
    # sendfile on | off;

    # 设置sendfile最大数据量 --- 配置：http/server/loaction
    # sendfilr_max_chunk size
    # sendfile_max_chunk 128k  # 表示nginx进程的每个worker进程每次调用sendfile()传输的数据量最大不能超过128k
    # dendfile_max_chunk 0  # 表示无限制 --- 默认为0

    # 配置链接超时时间 --- 配置：http/server/loaction
    # 表示：在服务器端保持连接的时间设置为120s，发给客户端的应答报文头部中Keep-Alive域的超时时间设置为100s
    keepalive_timeout 120s 100s;

    # 配置单连接请求数上限 --- 限制用户通过某一链接向nginx服务器发送请求的次数  默认为100
    # keepalive_requests number


    server:{
        listen 9001;
        server_name jason.zu.com;

        # 基于nginx服务器接收到的请求字符串，对除虚拟主机名称之外的字符串进行匹配
        # location [ = | ~ | ~* | ^~ ] uri { ... }
        # =  ^~  用于标准uri(不含正则的uri)
        # ~  ~*  用于正则uri
        # []中的为可选项  用来改变请求字符串与uri的匹配方式
        # uri:待匹配的请求字符串 --- 允许包含正则
        loaction / {
            # 设置请求寻找资源的跟目录
            root /sur/share/nginx/html;
            # 设置默认页
            index index.html index.htm;
            # 按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理
            # eg:请求127.0.0.1/test.html会依次查找:
            # 1. /sur/share/nginx/html/test.html  
            # 2. /sur/share/nginx/html/test.html/
            # 3. 127.0.0.1/index.html
            try_files $uri $uri/ /index.html;
        }

    }
}